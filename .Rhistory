times <- exp(1i * 2 * pi * (k:1) / k)
dfclock <- tibble(time = times,
label = paste0(c(6:12, 1:5), ampm))
# Plot
dt %>% ggplot(aes(x0,y0))+
geom_segment(aes(xend = x1, yend = y1, color = {{criteria}}))+
scale_color_gradient(low = "green",
high = "red")+
geom_text(data = dfclock,
aes(Re(time), Im(time), label = label,
inherit.aes = FALSE))+ #
labs(x = "", y = "")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none")
}
data_clock(data = rndtimes, time = Time, criteria = crit)
# data preparation
dt <- data %>%
separate({{time}}, into = c("hour", "minute"), remove = FALSE) %>%
mutate(minute = as.numeric(ifelse(is.na(minute),0,minute)),
minute = ifelse(minute<10, minute * 5/30, minute * 5/300),
hour = as.numeric(hour),
timc = hour+minute,
time_angle = ifelse(0<=timc & timc<=6,
(6-timc)*pi/12,
(30-timc)*pi/12),
x1 = cos(time_angle)*.9,
y1 = sin(time_angle)*.9,
x0 = rep(0, dim(data)[1]),
y0 = rep(0, dim(data)[1]))
data_clock <- function(data, time, criteria){
# data preparation
dt <- data %>%
separate({{time}}, into = c("hour", "minute"), remove = FALSE) %>%
mutate(minute = as.numeric(ifelse(is.na(minute),0,minute)),
minute = ifelse(minute<10, minute * 5/30, minute * 5/300),
hour = as.numeric(hour),
timc = hour+minute,
time_angle = ifelse(0<=timc & timc<=6,
(6-timc)*pi/12,
(30-timc)*pi/12),
x1 = cos(time_angle)*.9,
y1 = sin(time_angle)*.9,
x0 = rep(0, dim(data)[1]),
y0 = rep(0, dim(data)[1]))
## Clock preparation
ampm = c(rep(" AM",6), rep(" PM",12), rep(" AM",6))
k <- 24
times <- exp(1i * 2 * pi * (k:1) / k)
dfclock <- tibble(time = times,
label = paste0(c(6:12, 1:5), ampm))
# Plot
dt %>% ggplot(aes(x0,y0))+
geom_segment(aes(xend = x1, yend = y1, color = {{criteria}}))+
scale_color_gradient(low = "green",
high = "blue")+
geom_text(data = dfclock,
aes(Re(time), Im(time), label = label,
inherit.aes = FALSE))+ #
labs(x = "", y = "")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none")
}
data_clock(data = rndtimes, time = Time, criteria = crit)
data_clock(data = train_scd, time = Departure, criteria = Origin)
data_clock(data = train_scd, time = Departure, criteria = Train_no)
data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
data_clock <- function(data, time, criteria){
# data preparation
dt <- data %>%
separate({{time}}, into = c("hour", "minute"), remove = FALSE) %>%
mutate(minute = as.numeric(ifelse(is.na(minute),0,minute)),
minute = ifelse(minute<10, minute * 5/30, minute * 5/300),
hour = as.numeric(hour),
timc = hour+minute,
time_angle = ifelse(0<=timc & timc<=6,
(6-timc)*pi/12,
(30-timc)*pi/12),
x1 = cos(time_angle)*.9,
y1 = sin(time_angle)*.9,
x0 = rep(0, dim(data)[1]),
y0 = rep(0, dim(data)[1]))
## Clock preparation
ampm = c(rep(" AM",6), rep(" PM",12), rep(" AM",6))
k <- 24
times <- exp(1i * 2 * pi * (k:1) / k)
dfclock <- tibble(time = times,
label = paste0(c(6:12, 1:5), ampm))
# Plot
myclock <- dt %>% ggplot(aes(x0,y0))+
geom_segment(aes(xend = x1, yend = y1, color = {{criteria}}))+
scale_color_gradient(low = "green",
high = "blue")+
geom_text(data = dfclock,
aes(Re(time), Im(time), label = label,
inherit.aes = FALSE))+ #
labs(x = "", y = "")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none")
return(myclock)
}
data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
myclock
myclock <- data_clock(data = rndtimes, time = Time, criteria = crit)
myclock
myclock + labs(title = "Bangladesh Railway")
myclock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka")
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")
train_clock <- data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")
data_clock <- function(data, time, criteria){
# data preparation
dt <- data %>%
separate({{time}}, into = c("hour", "minute"), remove = FALSE) %>%
mutate(minute = as.numeric(ifelse(is.na(minute),0,minute)),
minute = ifelse(minute<10, minute * 5/30, minute * 5/300),
hour = as.numeric(hour),
timc = hour+minute,
time_angle = ifelse(0<=timc & timc<=6,
(6-timc)*pi/12,
(30-timc)*pi/12),
x1 = cos(time_angle)*.9,
y1 = sin(time_angle)*.9,
x0 = rep(0, dim(data)[1]),
y0 = rep(0, dim(data)[1]))
## Clock preparation
ampm = c(rep(" AM",6), rep(" PM",12), rep(" AM",6))
k <- 24
times <- exp(1i * 2 * pi * (k:1) / k)
dfclock <- tibble(time = times,
label = paste0(c(6:12, 1:5), ampm))
# Plot
myclock <- dt %>% ggplot(aes(x0,y0))+
geom_segment(aes(xend = x1, yend = y1, linetype = "dashed", color = {{criteria}}))+
scale_color_gradient(low = "green",
high = "blue")+
geom_text(data = dfclock,
aes(Re(time), Im(time), label = label,
inherit.aes = FALSE))+ #
labs(x = "", y = "")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none")
return(myclock) # Store clock to use outside the function
}
train_clock <- data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")
library(tidyverse)
k <- 24
times <- exp(1i * 2 * pi * (k:1) / k)
ampm = c(rep(" AM",6), rep(" PM",12), rep(" AM",6))
dfclock <- tibble(time = times,
hour = c(6:12, 1:12, 1:5),
label = paste0(c(6:12, 1:5), ampm))
dfclock %>%
geom_point(aes(Re(time), Im(time), label = label))
dfclock %>%
geom_point(aes(Re(time), Im(time)))
dfclock %>% ggplot()
dfclock
geom_point(aes(Re(time), Im(time)))+
geom_text(data = dfclock,
aes(Re(time), Im(time), label = label))
dfclock %>% ggplot()+
geom_point(aes(Re(time), Im(time)))
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")+
geom_point(data = dfclock, aes(Re(time), Im(time)))
dfclock
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")+
geom_point(data = dfclock, aes(Re(time)*1.1, 1.1*Im(time)))
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)))
data_clock <- function(data, time, criteria){
# data preparation
dt <- data %>%
separate({{time}}, into = c("hour", "minute"), remove = FALSE) %>%
mutate(minute = as.numeric(ifelse(is.na(minute),0,minute)),
minute = ifelse(minute<10, minute * 5/30, minute * 5/300),
hour = as.numeric(hour),
timc = hour+minute,
time_angle = ifelse(0<=timc & timc<=6,
(6-timc)*pi/12,
(30-timc)*pi/12),
x1 = cos(time_angle)*.9,
y1 = sin(time_angle)*.9,
x0 = rep(0, dim(data)[1]),
y0 = rep(0, dim(data)[1]))
## Clock preparation
ampm = c(rep(" AM",6), rep(" PM",12), rep(" AM",6))
k <- 24
times <- exp(1i * 2 * pi * (k:1) / k)
dfclock <- tibble(time = times,
label = paste0(c(6:12, 1:5), ampm))
# Plot
myclock <- dt %>% ggplot(aes(x0,y0))+
geom_segment(aes(xend = x1, yend = y1, color = {{criteria}}))+
scale_color_gradient(low = "green",
high = "blue")+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(data = dfclock, aes(Re(time), Im(time)))+ #
labs(x = "", y = "")+
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
legend.position = "none")
return(myclock) # Store clock to use outside the function
}
train_clock <- data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
train_clock
train_clock + labs(title = "Bangladesh Railway Train Schedule (Departing from Dhaka)")+
geom_point(data = dfclock, aes(Re(time), Im(time)))
train_clock <- data_clock(data = train_scd %>% filter(Origin == "Dhaka"),
time = Departure, criteria = Train_no)
train_clock
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)))
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 25)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19, color = "red")
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19, color = "red", size = 3)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19, color = "red", size = 2)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = "|", color = "red", size = 2)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19, color = "red", size = 2)
dfclock %>% ggplot()+
geom_text(data = dfclock, aes(Re(time)*1.1, Im(time)*1.1, label = label))+
geom_point(aes(Re(time), Im(time)), shape = 19, color = "red", size = 1.5)
library(ggplot2)
getwd()
tinytex::parse_install(
text = "! LaTeX Error: File `gfsdidot.sty' not found."
)
tinytex::parse_install(
text = "! LaTeX Error: File `pxfonts.sty' not found."
)
tinytex::tlmgr_install('cbfonts-fd')
tinytex::tlmgr_install('texlive-greek-fontenc')
tinytex::parse_install(
text = "I can't find the lgrenc.def file for the Greek fonts"
)
tinytex::tlmgr_install('greek-fontenc')
tinytex::parse_install(
text = "! LaTeX Error: File `microtype.sty' not found."
)
us_races <- data.frame(
Race = c("White", "Black", "Multiracial", "Asian", "Others"),
Percentage = c(61.6, 12.4, 10.2, 6, 9.8))
us_races %>% ggplot(aes(Race, Percentage, fill = Race))+
geom_bar(stat="identity", width = 0.6)+
scale_fill_brewer(palette = "Set2")+
geom_text(data = us_races, aes(Race, Percentage-2,
label=paste0(Percentage, "%")))+
theme(legend.position = "none")
library(tidyverse)
us_races %>% ggplot(aes(Race, Percentage, fill = Race))+
geom_bar(stat="identity", width = 0.6)+
scale_fill_brewer(palette = "Set2")+
geom_text(data = us_races, aes(Race, Percentage-2,
label=paste0(Percentage, "%")))+
theme(legend.position = "none")
src <- "https://www.espncricinfo.com/records/fastest-hundreds-211608"
fastest_odi_ton <- html_table(read_html(src), header = TRUE)[[1]]
library(rvest)
library(tidyverse)
library(RColorBrewer)
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Spectral"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
src <- "https://www.espncricinfo.com/records/fastest-hundreds-211608"
fastest_odi_ton <- html_table(read_html(src), header = TRUE)[[1]]
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Spectral"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
batting_src <- "https://www.espncricinfo.com/records/highest-career-batting-average-282911"
odi_batting_avg <- html_table(read_html(batting_src), header = TRUE)[[1]]
odi_batting_avg %>% top_n(10, Ave) %>%
mutate(Player = factor(Player, levels = Player[order(Ave)])) %>%
ggplot(aes(Player, Ave, fill = Player))+
geom_col()+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste("Average = ", Ave, " & Runs =", Runs)),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)
odi_batting_avg %>% top_n(10, Ave) %>%
mutate(Player = factor(Player, levels = Player[order(Ave)])) %>%
ggplot(aes(Player, Ave, fill = Player))+
geom_col()+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label= Ave), #paste("Average = ", Ave, " & Runs =", Runs)),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)
# Rose chart
piedf <- tibble(value = sample(30:50, 8),
cat = paste(LETTERS[1:8], "Group")) %>%
mutate(cat = factor(cat, level = cat[order(value)]))
piedf %>% ggplot(aes(cat, value, fill = cat))+
geom_bar(stat = "identity")+
coord_flip()+
coord_polar("x", start = 270)+
theme(axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title = element_blank(),
legend.position = "none")
piedf %>% ggplot(aes(x = "", y = value, fill = cat))+
geom_col()+
coord_polar("y")+
geom_text(aes(label = paste(round(100*value/sum(value),0), "%")),
position = position_stack(vjust = 0.5))+
theme(axis.ticks.x=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
axis.title = element_blank(),
legend.position = "none")
piedf %>% ggplot(aes(cat, value, fill = cat))+
geom_bar(stat = "identity")
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Spectral"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Spectral"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo",
x = "Player")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Greens"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo",
x = "Player")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Paired"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo",
x = "Player")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
fastest_odi_ton %>%
# mutate(Runs = as.numeric(gsub("\\*", "", Runs))) %>%
# Removes stars, not necessary for this plot
top_n(10, -Balls) %>%  # Select top ten
mutate(SL = 1:10) %>% # So that one player can be shown multiple times
mutate(SL = factor(SL, levels = SL[order(-Balls, Player)])) %>%
ggplot(aes(SL, Balls, fill = SL))+
geom_col(width = 0.8, alpha = 0.9)+
coord_flip()+
theme(legend.position = "none")+
geom_text(aes(label=paste(Balls, "")),
vjust=1, color="black", hjust = 1,
position = position_dodge(0.5), size=3.5)+
scale_fill_manual(values = brewer.pal(n = 10, name = "Paired"))+
#  scale_fill_brewer(palette = "Spectral")+
labs(title = "Fastest Centuries in Men's ODI Cricket",
caption = "Source: ESPncricInfo",
x = "Player")+
scale_x_discrete(labels = fastest_odi_ton$Player[-fastest_odi_ton$Balls][10:1])
ggsave(filename = "/random/cricket/fastest_ton.png")
ggsave(filename = "random/cricket/fastest_ton.png")
tinytex::parse_install(
text = "! LaTeX Error: File `lipsum.sty' not found."
)
tinytex::parse_install(
text = "! LaTeX Error: File `titletoc.sty' not found."
)
tinytex::parse_install(
text = "! LaTeX Error: File `bookmark.sty' not found."
)
getwd
getwd()
library(readr)
quakes <- read_csv("~/Documents/Workspace/docs/hs/research/data_clock/quakes.csv")
View(quakes)
library(readr)
quakes_usgs_2023_10_31 <- read_csv("~/Documents/Workspace/docs/hs/research/data_clock/quakes_usgs_2023_10_31.csv")
View(quakes_usgs_2023_10_31)
quakes_usgs_2023_10_31
quakes_usgs_2023_10_31$depth
sample(300:500,30)
x <- c("Red", "Brown", "White", "Green", "Pink")
sample(x, 30, replace = T)
tale(x)
table(x)
x
y=sample(x, 30, replace = T)
table(y)
y=sample(x, 30, replace = T)
table(y)
y
x <- c("Red", "Brown", "White", "Green", "Pink")
(y <- sample(x, 30, replace = T))
install.packages("pagedown")
tinytex::parse_install(
text = "! LaTeX Error: File `ClearSans.sty' not found."
)
